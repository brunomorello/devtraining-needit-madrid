<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>GET</http_method>
        <name>ni_getinfo</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    var requestedUserName = request.pathParams.user_name;
	var encodedQuery = request.queryParams.ni_query;
	
	if (!encodedQuery) {
		var customError = new sn_ws_err.ServiceError();
		customError.setStatus(400);
		customError.setMessage('Provide an encoded Query');
		return customError;
	}
	
	var user = new GlideRecord('sys_user');
	user.get('user_name', requestedUserName);
	
	// Performs Query to get Aggregate Value
	var aggQuery = new GlideAggregate('x_58872_needit_needit');
	aggQuery.addAggregate('COUNT');
	aggQuery.addQuery('u_requested_for', user.sys_id);
	aggQuery.addEncodedQuery(encodedQuery);
	aggQuery.groupBy('u_request_type');
	aggQuery.query();
	
	var requests = [];
	var requestsCount = 0;
	
	while(aggQuery.next()) {
		requests.push(
			{
				"requestType": aggQuery.u_request_type.getDisplayValue(),
				"count": aggQuery.getAggregate('COUNT')
			}
		);
		
		requestsCount = parseInt(requestsCount) + parseInt(aggQuery.getAggregate('COUNT'));
		
	}
	
	// stores response body
	var body = {};
	
	body.totalRequests = requestsCount;
	body.countByReqType = requests;
	body.user = {
		"User Name": user.user_name,
		"User ID": user.sys_id
	};
	
	response.setBody(body);
	
	
})(request, response);]]></operation_script>
        <operation_uri>/api/x_58872_needit/v1/needit_api/nigetinfo/{user_name}</operation_uri>
        <produces>application/json</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/nigetinfo/{user_name}</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description>Find the NeedIt active NeedIt records for a user. Group by What needed.</short_description>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-09-25 18:33:34</sys_created_on>
        <sys_id>51943aaadb040010723e14613996197c</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>ni_getinfo</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ws_operation_51943aaadb040010723e14613996197c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-09-25 20:41:08</sys_updated_on>
        <web_service_definition display_value="NeedIt API">f7e032e6db040010723e146139961947</web_service_definition>
        <web_service_version display_value="v1">ed12db26db840010723e146139961938</web_service_version>
    </sys_ws_operation>
</record_update>
